
// Mock LLM service

import { storageService } from './storage';

// Simulated delay for API calls
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// Mock responses for different types of questions
const mockResponses = [
  {
    response: "Quantum computing is like having a super-powerful calculator that can try many different answers at the same time, instead of one after another like regular computers. Imagine you have a maze, and instead of trying one path at a time, you could try all paths simultaneously! That's what makes quantum computers special - they use tiny particles that can exist in multiple states at once, letting them solve certain problems much faster than regular computers.",
    stats: {
      model: "gpt-4",
      prompt: "Explain quantum computing in simple terms a 10-year-old could understand.",
      promptTokens: 12,
      completionTokens: 85,
      totalTokens: 97,
      finishReason: "stop",
      estimatedCost: 0.03,
      fluency: "Very High",
      clarity: "Excellent",
      analogyUsed: "Superhero trying many ideas at once",
      responseSpeed: "2 seconds"
    }
  },
  {
    response: "Artificial intelligence is like teaching a computer to learn and make decisions, similar to how humans do. Imagine you're teaching a dog new tricks - at first, you guide it and give treats when it does well. AI works the same way! Scientists feed computers lots of information and tell them when they're right or wrong. Over time, the computer gets better at making decisions on its own, just like how a dog learns new tricks. Today, AI helps with things like recognizing your face to unlock your phone, suggesting videos you might like, or even driving cars without human drivers!",
    stats: {
      model: "gpt-3.5-turbo",
      prompt: "What is artificial intelligence and how does it work?",
      promptTokens: 10,
      completionTokens: 120,
      totalTokens: 130,
      finishReason: "stop",
      estimatedCost: 0.02,
      fluency: "High",
      clarity: "Very Good",
      analogyUsed: "Teaching a dog tricks",
      responseSpeed: "1.5 seconds"
    }
  },
  {
    response: "Climate change refers to long-term shifts in temperatures and weather patterns. These shifts may be natural, but since the 1800s, human activities have been the main driver of climate change, primarily due to the burning of fossil fuels like coal, oil, and gas, which produces heat-trapping gases. The effects include rising global temperatures, more severe weather events, rising sea levels, and disruptions to ecosystems. Addressing climate change requires both reducing emissions of greenhouse gases and adapting to the changes already underway.",
    stats: {
      model: "claude-2",
      prompt: "What is climate change and why should we care about it?",
      promptTokens: 11,
      completionTokens: 92,
      totalTokens: 103,
      finishReason: "stop",
      estimatedCost: 0.025,
      fluency: "Very High",
      clarity: "Good",
      analogyUsed: "None",
      responseSpeed: "2.3 seconds"
    }
  }
];

// Stat explanations
const statExplanations = {
  model: "The AI model used to generate the response.",
  prompt: "The question or instruction given to the AI.",
  promptTokens: "Number of tokens in the user input prompt.",
  completionTokens: "Tokens generated by the LLM in the response.",
  totalTokens: "Sum of prompt and completion tokens.",
  finishReason: "Why the response ended (e.g., stop, length).",
  estimatedCost: "Estimated cost based on token pricing.",
  fluency: "Measures grammatical correctness and flow.",
  clarity: "Indicates how easy it is to understand the response.",
  analogyUsed: "Whether a metaphor or analogy was used.",
  responseSpeed: "Time taken by the model to respond."
};

export const llmService = {
  async getResponse(prompt: string): Promise<{ response: string; stats: any }> {
    // Simulate API call delay (1.5-3.5 seconds)
    const responseTime = 1500 + Math.random() * 2000;
    await delay(responseTime);
    
    // Randomly select a mock response
    const mockResponse = mockResponses[Math.floor(Math.random() * mockResponses.length)];
    
    // Modify stats with the new prompt and adjusted response time
    const responseStats = {
      ...mockResponse.stats,
      prompt,
      responseSpeed: `${(responseTime / 1000).toFixed(1)} seconds`
    };
    
    // Store the stat explanations on first response
    if (!storageService.getStatExplanations()) {
      storageService.setStatExplanations(statExplanations);
    }
    
    return {
      response: mockResponse.response,
      stats: responseStats
    };
  }
};
